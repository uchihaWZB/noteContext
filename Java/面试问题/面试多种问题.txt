消息队列---

	主要特点：异步处理。目的：减少请求响应时间和解耦
	
	将比较耗时且无需及时（同步）返回结果的操作放入消息队列
	
	
String、StringBuffer、StringBuilder---

	三者在执行速度方面的比较：StringBuilder >  StringBuffer  >  String
	
		String：字符串常量；	每当操作字符串时，都会创建新的对象而原来的对象就会变为垃圾被ＧＣ回收掉

　　　　StringBuffer、StringBuilder：字符串变量；	是可改变的对象，每当对字符串做操作时，实际上是在一个对象上操作的

	StringBuilder：线程非安全的；	字符串缓冲被多个线程使用时，JVM不能保证其安全

　　StringBuffer：线程安全的

	总结：1.如果要操作少量的数据用 = String
		  2.单线程操作字符串缓冲区 下操作大量数据 = StringBuilder
		  3.多线程操作字符串缓冲区 下操作大量数据 = StringBuffer
		  

		  
重载和重写---

	重载体现 编译时多态性；	所以不能以返回类型区分
	重写体现 运行时多态性；	
	
	重写要求子类被重写方法与父类被重写方法有相同的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常
	
	
JVM加载class文件的原理机制---

	类加载器（ClassLoader）及其子类负责在运行时查找和装入类文件中的类
	
	把类文件读入内存--->产生与加载类对应的Class对象--->进入连接阶段（验证，准备，解析）--->JVM对类进行初始化
	
抽象和接口---

	都不能被实例化，但均可定义其引用；
	
	抽象类中可以有具体方法，接口只能都是抽象方法；
	抽象成员可以各种类型，接口只可public；
	
字符串反转---

	//递归二分截取左右互换
	String reverse(String str) {
		int length = str.length();
		if(length < 1) {
			return str;
		}
		String leftStr = str.substring(0, length / 2);
		String rightStr = str.substring(length / 2, length);
		
		return reverse(rightStr) + reverse(leftStr);
	}
	
	//类似于栈，从头开始每次往里压字母
    public static String reverse2(String s) {
        int length = s.length();
        String reverse = "";
        for (int i = 0; i < length; i++)
            reverse = s.charAt(i) + reverse;
        return reverse;
    }
	
集合---

	1、ArrayList是线程不安全的；
	2、Vector是比较古老的线程安全的，但性能不行；
	3、CopyOnWriteArrayList在兼顾了线程安全的同时，又提高了并发性，性能比Vector有不少提高