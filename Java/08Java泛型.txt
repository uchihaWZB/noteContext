
泛型：本质是参数化类型，所操作的数据类型被指定为参数，用在类、接口和方法中，在外部声明及实例化对象时才指定类型。
	  目的是为了建立具有安全类型的集合框架。

	泛型类：class 类名<T>
	
		T可以是任何对象或接口，但不可是基本数据类型
		
		!!!注意：
			
			Class<String>和Class<Object>是两种不同的类型，尽管String继承了Object
			
			但，Class<String> ls = new ArrayList<String>();
				Class<Object> lo = ls;
			是非法的
			因为根据lo的声明，编译器允许你向lo中添加任意对象（例如Integer），但是此对象是Class<String>，破坏了数据类型的完整性。
		
	泛型接口：interface 接口名<T>
	
		实现有两种方式：
		
			1、直接声明泛型：class 实现类<T> implements 接口名<T>{...}
			
							 接口名<String> temp = new 实现类<String>("...")
							 
			2、明确给出泛型类型：class 实现类 implements 接口名<String>{...}
			
								 接口名<String> temp = new 实现类("...")
								 
	泛型方法：[访问权限] <泛型标识> 泛型标识 方法名称([]) 
	
		!!!注意：
		
			泛型方法一般要求 传入的泛型对象 的 泛型类型 一致，因为一般只传入一种泛型
			
			@第一个<T>: 声明此方法只有一个类型T，也可理解为声明此方法为泛型方法
			@第二个T：	指该方法返回值类型为T
			@第三个<T>:	指明传入参数的泛型的具体类型
			@class：	用来创建泛型T代表的类的对象
			
			public <T> T 方法名(Class<T> class)
			
			若有两个泛型类型，则：
			
				public <T, E> T 方法名(Class<T> class1, Class<E> class2)
				
				此处的返回类型还是指明为T