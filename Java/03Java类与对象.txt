Java的类与对象
	
	
	1、类和对象：
		
		类		是把具有相同 属性 和 行为 的事物抽象成一类，它是一个模版，描述一类对象的行为和状态。
		对象	是类的具体实例
		
		一个全面类的定义：
		
				package 包名;
				
				class 类名 [extend 父类] [implements 接口名]
				{
					成员变量
			类体：	构造方法
					成员方法
				}
			
		1.1、类名：首字母大写
		1.2、类体：
			1、变量的声明，用以刻画属性
			2、方法的定义，用以刻画功能
				
		1.3、变量：
		
				成员变量(全局变量，类的属性)：成员变量是定义在类中，方法体之外的变量，整个类内部有效。存储在堆中，成员变量在创建对象时被实例化，所以一开始声明时不用赋值。	
							
					实例变量：			不用static修饰	int x	
					类变量(静态变量)：	用static修饰	static int x
							
				局部变量(方法的属性)：在方法、构造方法或者语句块中定义的变量被称为局部变量。存储在栈中，声明和初始化在方法内，方法结束后自动被销毁
			
			PS1、成员变量与局部变量同名，成员变量就被隐藏；局部变量使用前须初始化
			
		 ***PS2、匿名对象(无主对象)：
		 
					直接 new People().name = "xxxx"; 没有指定引用变量，或指向对象的引用变量被回收了，对象没有任何引用变量指向
			
					无意义，很快会被JVM回收。实际开发中要避免
				
		1.4、方法：方法声明和方法体
		
	
	2、this关键字
		
		只能在类的对象的方法中使用，可以出现在实例方法和构造方法中，不可在类方法！代表了当前对象的引用（当方法未被调用时，并不知this指向哪个对象）；
		
		常用应用：区分同名的属性和局部变量，在方法中使用被隐藏的成员变量，调用本类中的属性；
		
		***通过this可以调用同类中的构造器（必须置于构造方法中的第一行）：this(参数列表)
		
				Person(String name){
					this.name = name;
				}
				
				Person(String name, int age) {
					this(name);
					this.age = age;
				}
				
		
		总结：this是类内对自己的一个引用，可方便类中的方法访问自己的属性；
			
			  可以返回对象的自己这个类的引用，同时还可在一个构造函数中调用另一个构造函数
		
	3、Java构造器（构造方法）	每个类都有构造方法。如果没有显式地为类定义构造方法，Java编译器将会为该类提供一个默认构造方法
	
		方法名同类名；	无返回值；	创建对象自动调用(初始化)；
		专门用以创建对象，可以存在多个;
		类中没有定义构造函数时，默认使用一个隐藏的无参构造函数。一旦定义了带参构造函数，默认构造函数会被覆盖。要使用的话需显示定义出
		
		默认构造方法：		类名() {}
		
		构造函数中this用法：
		
			class A {
				...
				A(){}
				A(int a, int b){
					this();				//调用上面的无参构造函数
					this.a = a;
					this.b = b;
				}
				A(int a, int b, int c){
					this(a, b);			//调用上面构造函数，避免重复代码
					this.c = c;
				}
			}
			
	4、static：修饰的成员变量和成员方法独立于该类的任何对象。也就是说，它不依赖类特定的实例，被类的所有实例共享。
			   只要这个类被加载，Java虚拟机就能根据类名在运行时数据区的方法区内定找到他们
	
			类变量：	static 数据类型 变量名
			
				与实例变量的区别：1、类变量可通过对象访问(不推荐)，也可通过类名访问。实例变量只能通过对象进行访问；
				
								  2、类可创建多个对象。对于实例变量，每个对象会为其分配不同的内存空间（灵活，互不干扰）。
									 对于类变量，所有的类变量分配相同的空间（节省内存），所有对象共享类变量。
								  
								  3、类变量在创建对象前就已加载至内存中的数据共享区，在程序退出时才会释放内存
								  
								  4、类变量生命周期：所包含类加载至JVM---JVM消失(程序退出)。实例变量生命周期：对象被创建时---对象所在方法执行完毕
								  
								  PS：数据需要被共享给所有对象使用时，那么就可以使用static修饰；
									  static不可修饰局部变量
			
			类方法：	static 返回值类型 方法名([参数])
			
				与实例方法的区别：1、在一个类中，实例方法可以调用任何方法(包括类方法)、变量(类变量)；
									 ***类方法只能调用类方法、类变量；
									 ***静态方法不能以任何方式引用this和super关键字
				
								  2、可以使用类名调用类方法(推荐使用)，实例方法只能通过对象调用
								  
								  3、类方法所在的类被加载至JVM时，就分配了入口地址；实例方法在类创建对象后，才分配入口地址
				
			static代码块：
			
								类中独立于类成员的代码块，可以多个，位置随意，不在任何方法体内。JVM加载类时会执行这些静态的代码块，按出现顺序执行；
								
								一般用其对一些static变量赋值；
								
						static方法块与static方法区别：
						
								静态代码块自动执行，静态方法需要被调用；
								
								
			static final：用来修饰成员变量和成员方法，可简单理解为“全局常量”
			
						对于变量，表示一旦给值就不可修改，并且通过类名可以访问。
						对于方法，表示不可覆盖，并且可以通过类名直接访问。