Java语言概述

	诞生于1995年，sun公司。在2009年被Oracle（甲骨文公司）收购
	
	特点：语法简单，面向对象，稳定，与平台无关，多线程，动态；
	
	跨平台性：Java在OS之上再提供一个Java运行环境，使Java写好的程序可以在任何系统上运行。一次编译，处处运行
			  Java为每个平台提供了 JVM（Java虚拟机）
	
	
Java语言分支

	JavaSE：(标准版) 是Java基础
	
	JavaME：移动端开发，已被安卓，iOS代替
	
	JavaEE：(企业级) 面向企业级
	
	
Java环境的搭建

	JDK：JavaDevelopmentKit Java开发工具 开发时使用的 （我们只安装JDK即可）
	
		JRE：JavaRuntimeEnvironment Java运行环境
			
			JVM（Java虚拟机）：Java程序在Java虚拟机中运行；
			
			Java核心类库：jre提供的让程序能运行的Java类
			
		Java开发工具：Java编译器，Java解释器
		
		
	Java运行关系：
	
	 ***Java源文件(.java文件)----(java编译器javac.exe)---->Java字节码文件(.class文件)----(由解释器java.exe将字节码加载到JVM)---->JVM(.class文件会在JVM中执行)
		
	
	配置Path，使javac.exe和java.exe通过命令在任意目录下执行
	配置classpath，可以在任意目录下找到指定的class文件位置 （针对的是运行而非编译），\jre文件夹中包含Java应用程序运行时所需的Java类库
	
	set(cmd命令)，查看所有环境变量
	
	环境变量classpath(类路径)：
		配置了classpath，运行Java程序时会优先去classpath的路径找class文件运行，就可以在任意目录来运行Java程序
		
第一个Java应用程序

	//Java程序以类的方式组织 Class
	//一个Java源文件中至少有一个类，至多只有一个public修饰的类作为公共类，源文件名优先等同于公共类名
	//类名首字母大写
	public class Hello {
	
		//主方法入口，所有的Java程序由此开始执行
		public static void main(String args[]) {
			System.out.println("hello!");
		}
	}

***Java内存

	栈内存：空间小，存储速度快；
			一些 基本类型的变量 和 对象的引用变量 在函数的栈内存中分配。局部变量超过其作用域时，Java会自动释放为该变量分配的内存空间
	
	堆内存：空间大，存储速度慢；
			存放由new创建的对象和数组。在堆中分配的内存由JVM虚拟机自动垃圾回收器管理
			
	 ***堆中产生了一个数组或对象后，在栈中可定义一个特殊变量，用以存储 数组或对象 在 堆内存 的首地址，该特殊变量即变成了数组或对象的引用变量。
	 ***引用变量相当于一个别名，用以在栈中访问数组或对象。
	 ***栈中引用变量超过其作用域时，引用变量被回收，引用变量指向的数组或对象变成垃圾(没有引用变量指向)，但仍然占这内存，随后一个不确定的时间才被回收(Java占内存的原因！！)
	
Java基础语法
	
	1、标识符（对各种变量，方法和类等要素命名时所使用的字符序列）

		使用26个字母大小写或数字和“_”，数字不能开头，区分大小写；
		类和接口首字母大写；
		变量和方法首字母小写；
		常量每个字母大写，单词间用"_"连接
		
	2、关键字（不能用于标识符）
	
	3、常量和变量（在内存中做数据交换的一个过程）
	
		Java程序运行：开辟内存空间(JVM)--->提取数据(.class)--->CPU调度运行
		
		程序运行中，内存空间可以变化的数据量为变量，不能变化的量为常量
		
		变量：（变量存储的数据量的大小，类型由数据类型决定；变量的定义必须有初始值）
			局部变量	定义在方法和代码块
			类变量(静态变量)
			成员变量(非静态变量)
			
	4、数据类型
	
		4.1、基本数据类型（8种并分为4大类型）
			
			整数类型：字节型	byte	1字节	-128~127；		不存在常量表示法，可以把一定范围内int型常量赋给byte型变量	（一个字节8位）
					  短整型	short	2字节	-2^15~2^15-1；	同上
					  整型		int		4字节	-2^31~2^31-1	123（10）、077（8）、0x3ABC（16）
					  长整型	long	8字节	-2^63~2^63-1	108L
				
			浮点类型：单精度	float	4字节	-3.403E38~3.403E38；	常量必须有后缀f或F
					  双精度	double	8字节	-1.798E308~1.798E308	常量后缀可以有d或D，也可省略						小数类型和整型存储方式不同
				
			字符类型：2字节	占16位，最高位不是符号位，无负数	使用单引号	内存中存储的是Unicode表排序位置
					  char x = 'a' <==> char x = 97
					  查看字符在Unicode中的位置 (int)'a'
				
			布尔类型：2字节 两个值 true false
			
		4.2、引用数据类型
			
			类
			接口
			数组
		
		4.3、类型转换
		
			类型精度排列：byte<short<char<int<long<float<double
			
			自动转换：由低到高
			
			显示转换：由高到低	int x = (int)34.89	有可能会损失精度
			
		 ***PS：byte，short，char在计算时会自动提升为int类型，而int溢出时不会提升只会损失精度；
				任何整数类型和long做运算都会转换成long
				
				
	5、程序的执行（由上至下，顺序执行）
	
		程序流程控制注意：
		
				switch表达式的值须是byte、short、int、char
				
				break用于跳出里层循环，并执行循环下面的语句。continue用于立刻跳转到下一次循环的迭代
				
				
	6、函数和数组
	
		6.1、函数（方法）：一段能完成独立功能的代码块；				优点：利于维护，提高效率、复用
					  解决一类问题的步骤的有序集合；
					  包含于类或对象中；
		
			<public> <static> 返回值类型 方法名([参数类型 参数名]) {
				//方法体
				[return]
			}
		
			调用一个方法时所传递的变量叫实参，被调用的方法中的参数叫形参；
			
		 ***Java调用方法采用 值传递 方式，把实参的值传给形参。再具体些：如果是基本类型，即传入该值的一个拷贝；如果是类类型，传入的是引用的一个拷贝，归根还是值传递！！
		 
			方法的重载：(一个类中有两个或两个以上同名方法，但参数不同[类型、个数])
				
				Java编译器根据方法签名判断那个方法该被调用，跟返回值无关
			
		6.2、数组：(一个数据的集合)
	
			数据类型[] 变量名 = new 数据类型[整数]
			
			数组存储在堆内，其引用变量存储在栈内。访问数组：引用变量(数组的首地址)+索引
			
			
Java面向对象
	
	机器语言、汇编语言	面向机器
	C语言				面向过程
	Java语言			面向对象
	
	面向对象以功能来划分，而不是步骤。它的思想是 抽取一类具有相同属性和行为的事物。Java体系中“万物皆对象”（除了8种基本数据类型）

	1、类和对象：
		
		类		是把具有相同 属性 和 行为 的事物抽象成一类，它是一个模版，描述一类对象的行为和状态。
		对象	是类的具体实例
		
		一个全面类的定义：
		
			package 包名;
			
			class 类名 [extend 父类] [implements 接口名]
			{
				成员变量
		类体：	构造方法
				成员方法
			}
			
		1.1、类名：首字母大写
		1.2、类体：
			1、变量的声明，用以刻画属性
			2、方法的定义，用以刻画功能
				
		1.3、变量：
			成员变量(全局变量，类的属性)：成员变量是定义在类中，方法体之外的变量，整个类内部有效。存储在堆中，成员变量在创建对象时被实例化，所以一开始声明时不用赋值。	
						
				实例变量：			不用static修饰	int x	
				类变量(静态变量)：	用static修饰	static int x
						
			局部变量(方法的属性)：在方法、构造方法或者语句块中定义的变量被称为局部变量。存储在栈中，声明和初始化在方法内，方法结束后自动被销毁
			
			PS1、成员变量与局部变量同名，成员变量就被隐藏；局部变量使用前须初始化
			
		 ***PS2、匿名对象(无主对象)：
		 
			直接 new People().name = "xxxx"; 没有指定引用变量，或指向对象的引用变量被回收了，对象没有任何引用变量指向
			
			无意义，很快会被JVM回收。实际开发中要避免
				
		1.4、方法：方法声明和方法体
		
	2、封装：	将数据和对数据的操作封装在一起。目的 提高数据安全性，设置控制访问权限。
				数据保护在内部，其他程序只可通过被授权的操作(成员方法)才能对数据进行操作。
				
			公开级别：	public
			受保护级别：protected	对子类和统一包中类公开
			默认级别：	无修饰符	对同一包中类公开
			私有级别：	private		只对类本身公开
			
	3、this关键字
		
		只能在类的对象的方法中使用，可以出现在实例方法和构造方法中，不可在类方法！代表了当前对象的引用；
		
		常用应用：在方法中使用被隐藏的成员变量
	
		