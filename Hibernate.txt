
	Hibernate		Java ORM（对象关系映射）框架	对JDBC进行轻量级的封装		基础还是反射机制
	
	对象持久化	（持久化的概念，把数据持久保持在可掉电的存储设备中）
	
		关系数据库中：数据的表现形式-->表，存储形式-->记录
		
		面向对象中：数据的表现形式-->类，存储形式-->对象的状态
		
		所以对象持久化的过程：将对象的状态持久的保存为数据库中的记录
		
	软件结构层次（一般）：
	
		表现层---控制层---业务逻辑层---数据逻辑层（持久层）
		
		业务逻辑层使用HQL语句，不关心底层具体数据库语句
		
		持久层和底层数据库交互，一般通过DAO设计模式实现
		
	Java对象持久化方案
	
		JDBC
		
		ORM
			以面向对象的方式操作数据库
			
			映射基础：
				
				表结构------类结构
				表记录------对象
				表主键------对象ID
				表字段------类属性
				
	Hibernate总体框架
	
		Application
			持久化对象（PO）
		Hibernate
			api文件
			配置文件
			映射文件
			
	Hibernate核心接口
	
		Configuration：	配置信息类，读取配置文件，启动Hibernate 创建SessionFactory
		
		SessionFactory：Session工厂类，提供Session实例。对应一个数据源存储。是线程安全的，可由多个线程共享
		
		Session：		将其看作JDBC中的Connection。用于对数据的操作。非线程安全
		
		Query：			Hibernate查询接口（以HQL方式）
		
		Criteria：		Hibernate核心接口（以面向对象的方式）
		
		Transaction：	事务接口，提交和回滚
		
	使用Hibernate好处：工作人员角色细化，程序员更关注业务流程，数据库人员更关注DB操作；
					   分层清晰，耦合性小；
					   通用性强，DB切换方便；
					   对象化，关系数据库--->Java对象；
					   
    PO类：Hibernate中与数据库中某张表映射的Java类
	
		有一个主键属性，标识唯一对象；
		有其他属性；
		对应get/set方法；
		一定有一个无参构造函数（用于Java反射机制）；
		
		
	Hibernate进行 增、删、改时必须使用事物提交!!!
					   